{"version":3,"sources":["components/AutoScalingText/index.js","utils/helper.js","components/CalculatorDisplay/index.js","components/CalculatorKey/index.js","components/Calculator/index.js","App.js","serviceWorker.js","index.js"],"names":["AutoScalingText","state","scale","this","node","actualScale","parentNode","offsetWidth","setState","_this2","react_default","a","createElement","className","style","transform","concat","ref","props","children","Component","defaultProps","DigitKeys","CalculatorOperations","/","name","symbol","func","prevValue","nextValue","*","-","+","=","calculatorDisplay","_ref","value","Object","objectWithoutProperties","assign","components_AutoScalingText","language","navigator","formattedValue","parseFloat","toLocaleString","useGrouping","maximumFractionDigits","match","test","length","String","toExponential","getFormattedValue","calculatorKey","onClick","react_point","onPoint","defaultPtops","Calculator","displayValue","operator","waitingForOperand","clearAll","_this","clearDisplay","clearLastChar","substring","toggleSign","newValue","inputPercent","fixedDigits","replace","toFixed","performOperation","nextOperator","_this$state","inputValue","currentValue","inputDigit","digit","_this$state2","inputDot","_this$state3","handleKeyDown","key","event","preventDefault","parseInt","document","addEventListener","removeEventListener","clearText","CalculatorDisplay","CalculatorKey","map","_","App","components_Calculator","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fbf9bef1.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport './styles.css'\n\nclass AutoScalingText extends Component {\n  state = {\n    scale: 1\n  }\n\n  static propTypes = {\n    children: PropTypes.string\n  }\n\n  static defaultProps = {\n    children: '0'\n  }\n\n  componentDidUpdate () {\n    const { scale } = this.state\n\n    const node = this.node\n    const parentNode = node.parentNode\n\n    const availableWidth = parentNode.offsetWidth\n    const actualWidth = node.offsetWidth\n    const actualScale = availableWidth / actualWidth\n\n    if (scale === actualScale) { return }\n\n    if (actualScale < 1) {\n      this.setState({ scale: actualScale })\n    } else if (scale < 1) {\n      this.setState({ scale: 1 })\n    }\n  }\n\n  render () {\n    const { scale } = this.state\n\n    return (\n      <div\n        className=\"auto-scaling-text\"\n        style={{ transform: `scale(${scale},${scale})` }}\n        ref={node => { this.node = node }}\n      >\n        {this.props.children}\n      </div>\n    )\n  }\n}\n\nexport default AutoScalingText\n","export const DigitKeys = [7, 8, 9, 4, 5, 6, 1, 2, 3, 0]\n\nexport const CalculatorOperations = {\n  '/': {\n    name: 'divide',\n    symbol: '÷',\n    func: (prevValue, nextValue) => prevValue / nextValue\n  },\n  '*': {\n    name: 'multiply',\n    symbol: '×',\n    func: (prevValue, nextValue) => prevValue * nextValue\n  },\n  '-': {\n    name: 'subtract',\n    symbol: '−',\n    func: (prevValue, nextValue) => prevValue - nextValue\n  },\n  '+': {\n    name: 'add',\n    symbol: '+',\n    func: (prevValue, nextValue) => prevValue + nextValue\n  },\n  '=': {\n    name: 'equals',\n    symbol: '=',\n    func: (prevValue, nextValue) => nextValue\n  }\n}\n\nexport const getFormattedValue = value => {\n  const language = navigator.language || 'en-US'\n\n  let formattedValue = parseFloat(value).toLocaleString(language, {\n    useGrouping: true,\n    maximumFractionDigits: 6\n  })\n\n  const match = value.match(/\\.\\d*?(0*)$/)\n\n  if (match) { formattedValue += (/[1-9]/).test(match[0]) ? match[1] : match[0] }\n\n  return formattedValue.length >= 14 ? String(parseFloat(value).toExponential()) : formattedValue\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport AutoScalingText from '../AutoScalingText'\nimport { getFormattedValue } from '../../utils/helper'\nimport './styles.css'\n\nconst calculatorDisplay = ({ value, ...props }) => (\n  <div {...props} className=\"calculator-display\">\n    <AutoScalingText>{getFormattedValue(value)}</AutoScalingText>\n  </div>\n)\n\ncalculatorDisplay.propTypes = {\n  value: PropTypes.string\n}\n\ncalculatorDisplay.defaultProps = {\n  value: '0'\n}\n\nexport default calculatorDisplay\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport PointTarget from 'react-point'\nimport './styles.css'\n\nconst calculatorKey = ({ onClick, className, ...props }) => (\n  <PointTarget onPoint={onClick}>\n    <button className={`calculator-key ${className}`} {...props} />\n  </PointTarget>\n)\n\ncalculatorKey.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  className: PropTypes.string\n}\n\ncalculatorKey.defaultPtops = {\n  className: null\n}\n\nexport default calculatorKey\n","import React, { Component } from 'react'\nimport _ from 'lodash'\nimport CalculatorDisplay from '../CalculatorDisplay'\nimport CalculatorKey from '../CalculatorKey'\nimport { CalculatorOperations, DigitKeys } from '../../utils/helper'\n\nimport './styles.css'\n\nclass Calculator extends Component {\n  state = {\n    value: null,\n    displayValue: '0',\n    operator: null,\n    waitingForOperand: false\n  }\n\n  clearAll = () => {\n    this.setState({\n      value: null,\n      displayValue: '0',\n      operator: null,\n      waitingForOperand: false\n    })\n  }\n\n  clearDisplay = () => {\n    this.setState({\n      displayValue: '0'\n    })\n  }\n\n  clearLastChar = () => {\n    const { displayValue } = this.state\n\n    this.setState({\n      displayValue: displayValue.substring(0, displayValue.length - 1) || '0'\n    })\n  }\n\n  toggleSign = () => {\n    const { displayValue } = this.state\n    const newValue = parseFloat(displayValue) * -1\n\n    this.setState({\n      displayValue: String(newValue)\n    })\n  }\n\n  inputPercent = () => {\n    const { displayValue } = this.state\n    const currentValue = parseFloat(displayValue)\n\n    if (currentValue === 0) { return }\n\n    const fixedDigits = displayValue.replace(/^-?\\d*\\.?/, '')\n    const newValue = parseFloat(displayValue) / 100\n\n    this.setState({\n      displayValue: String(newValue.toFixed(fixedDigits.length + 2))\n    })\n  }\n\n  performOperation = nextOperator => () => {\n    const { value, displayValue, operator } = this.state\n    const inputValue = parseFloat(displayValue)\n\n    if (value == null) {\n      this.setState({\n        value: inputValue\n      })\n    } else if (operator) {\n      const currentValue = value || 0\n      const newValue = CalculatorOperations[operator].func(currentValue, inputValue)\n\n      this.setState({\n        value: newValue,\n        displayValue: String(newValue)\n      })\n    }\n\n    this.setState({\n      waitingForOperand: true,\n      operator: nextOperator\n    })\n  }\n\n  inputDigit = digit => () => {\n    const { displayValue, waitingForOperand } = this.state\n\n    if (waitingForOperand) {\n      this.setState({\n        displayValue: String(digit),\n        waitingForOperand: false\n      })\n    } else {\n      this.setState({\n        displayValue: displayValue === '0' ? String(digit) : displayValue + digit\n      })\n    }\n  }\n\n  inputDot = () => {\n    const { displayValue, waitingForOperand } = this.state\n    if (waitingForOperand) {\n      this.setState({\n        displayValue: '0.',\n        waitingForOperand: false\n      })\n    } else if (!(/\\./).test(displayValue)) {\n      this.setState({\n        displayValue: displayValue + '.',\n        waitingForOperand: false\n      })\n    }\n  }\n\n  handleKeyDown = ({ key }) => {\n    if (key === 'Enter') { key = '=' }\n\n    if ((/\\d/).test(key)) {\n      event.preventDefault()\n      this.inputDigit(parseInt(key, 10))()\n    } else if (key in CalculatorOperations) {\n      event.preventDefault()\n      this.performOperation(key)()\n    } else if (key === '.') {\n      event.preventDefault()\n      this.inputDot()\n    } else if (key === '%') {\n      event.preventDefault()\n      this.inputPercent()\n    } else if (key === 'Backspace') {\n      event.preventDefault()\n      this.clearLastChar()\n    } else if (key === 'Clear') {\n      event.preventDefault()\n\n      if (this.state.displayValue !== '0') {\n        this.clearDisplay()\n      } else {\n        this.clearAll()\n      }\n    }\n  }\n\n  componentDidMount () {\n    document.addEventListener('keydown', this.handleKeyDown)\n  }\n\n  componentWillUnmount () {\n    document.removeEventListener('keydown', this.handleKeyDown)\n  }\n\n  render () {\n    const { displayValue } = this.state\n\n    const clearDisplay = displayValue !== '0'\n    const clearText = clearDisplay ? 'C' : 'AC'\n\n    return (\n      <div className=\"calculator\">\n        <CalculatorDisplay value={displayValue} />\n        <div className=\"calculator-keypad\">\n          <div className=\"input-keys\">\n            <div className=\"function-keys\">\n              <CalculatorKey\n                className=\"key-clear\"\n                onClick={clearDisplay ? this.clearDisplay : this.clearAll}\n              >\n                { clearText }\n              </CalculatorKey>\n              <CalculatorKey\n                className=\"key-sign\"\n                onClick={this.toggleSign}\n              >\n                ±\n              </CalculatorKey>\n              <CalculatorKey\n                className=\"key-percent\"\n                onClick={this.inputPercent}\n              >\n                %\n              </CalculatorKey>\n            </div>\n            <div className=\"digit-keys\">\n              {\n                DigitKeys.map(digit =>\n                  <CalculatorKey\n                    key={`key-${digit}`}\n                    className={`key-${digit}`}\n                    onClick={this.inputDigit(digit)}\n                  >\n                    { digit }\n                  </CalculatorKey>\n                )\n              }\n              <CalculatorKey\n                className=\"key-dot\"\n                onClick={this.inputDot}\n              >\n                ●\n              </CalculatorKey>\n            </div>\n          </div>\n          <div className=\"operator-keys\">\n            {\n              _.map(CalculatorOperations, (value, key) =>\n                <CalculatorKey\n                  key={`key-${value.name}`}\n                  className={`key-${value.name}`}\n                  onClick={this.performOperation(key)}\n                >\n                  { value.symbol }\n                </CalculatorKey>\n              )\n            }\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nexport default Calculator\n","import React, { Component } from 'react'\nimport Calculator from './components/Calculator'\nimport './App.css'\n\nclass App extends Component {\n  render () {\n    return (\n      <div className=\"app\">\n        <Calculator />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport './global-styles.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}