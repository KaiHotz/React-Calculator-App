{"version":3,"sources":["types/index.ts","utils/helpers.ts","components/CalculatorDisplay/CalculatorDisplay.tsx","components/CalculatorKey/CalculatorKey.tsx","reducer/reducer.ts","components/Calculator/Calculator.tsx","hooks/useCalculator.ts","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["EInputTypes","digitKeys","calculatorOperations","name","symbol","func","prevValue","nextValue","_prevValue","getFormattedValue","value","language","navigator","formattedValue","parseFloat","toLocaleString","useGrouping","maximumFractionDigits","match","exec","test","length","toExponential","toString","CalculatorDisplay","useState","scale","setScale","parentRef","useRef","innerRef","useEffect","availableWidth","current","offsetWidth","actualWidth","actualScale","className","ref","style","transform","CalculatorKey","onClick","keyValue","type","initialState","displayValue","operator","waitingForOperand","calculatorReducer","state","action","inputDigit","payload","inputDot","inputPercent","fixedDigits","replace","newValue","toFixed","toggleSign","clearLastChar","substring","clearDisplay","performOperation","inputValue","currentValue","String","clearAll","Calculator","useReducer","dispatch","handleKeyDown","e","key","preventDefault","document","addEventListener","removeEventListener","handleClick","useCalculator","map","digit","_","App","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.3dccc3a0.chunk.js","sourcesContent":["export type Digits = '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '0';\nexport type OperactionKeys = '/' | '*' | '-' | '+' | '=' | 'Enter';\nexport type OperationNames = 'divide' | 'multiply' | 'subtract' | 'add' | 'equals' | 'enter';\nexport type OperationSymbols = '÷' | '×' | '−' | '+' | '=';\n\nexport type CalculatorOperations = {\n  [key in OperactionKeys]: {\n    name: OperationNames;\n    symbol: OperationSymbols;\n    func: (prevValue: number, nextValue: number) => number;\n  };\n};\n\nexport enum EInputTypes {\n  inputDigit = 'inputDigit',\n  inputDot = 'inputDot',\n  inputPercent = 'inputPercent',\n  toggleSign = 'toggleSign',\n  clearLastChar = 'clearLastChar',\n  clearDisplay = 'clearDisplay',\n  performOperation = 'performOperation',\n  clearAll = 'clearAll',\n}\n\nexport interface ICalculaterState {\n  value: number | null;\n  displayValue: string;\n  operator: string | number | null;\n  waitingForOperand: boolean;\n}\n","import { Digits, CalculatorOperations } from '../types';\n\nexport const digitKeys: Digits[] = ['7', '8', '9', '4', '5', '6', '1', '2', '3', '0'];\n\nexport const calculatorOperations: CalculatorOperations = {\n  '/': {\n    name: 'divide',\n    symbol: '÷',\n    func: (prevValue: number, nextValue: number) => prevValue / nextValue,\n  },\n  '*': {\n    name: 'multiply',\n    symbol: '×',\n    func: (prevValue: number, nextValue: number) => prevValue * nextValue,\n  },\n  '-': {\n    name: 'subtract',\n    symbol: '−',\n    func: (prevValue: number, nextValue: number) => prevValue - nextValue,\n  },\n  '+': {\n    name: 'add',\n    symbol: '+',\n    func: (prevValue: number, nextValue: number) => prevValue + nextValue,\n  },\n  '=': {\n    name: 'equals',\n    symbol: '=',\n    func: (_prevValue: number, nextValue: number) => nextValue,\n  },\n  'Enter': {\n    name: 'enter',\n    symbol: '=',\n    func: (_prevValue: number, nextValue: number) => nextValue,\n  },\n};\n\nexport const getFormattedValue = (value: string): string => {\n  const language = navigator.language || 'en-US';\n\n  let formattedValue = parseFloat(value).toLocaleString(language, {\n    useGrouping: true,\n    maximumFractionDigits: 6,\n  });\n\n  const match = /\\.\\d*?(0*)$/.exec(value);\n\n  if (match) {\n    formattedValue += /[1-9]/.test(match[0]) ? match[1] : match[0];\n  }\n\n  return formattedValue.length >= 14 ? parseFloat(value).toExponential().toString() : formattedValue;\n};\n","import React, { FC, useRef, useState, useEffect } from 'react';\nimport { getFormattedValue } from '../../utils/helpers';\nimport './CalculatorDisplay.scss';\n\nexport interface ICalculatorDisplayProps {\n  value: string;\n}\n\nexport const CalculatorDisplay: FC<ICalculatorDisplayProps> = ({ value = '0' }) => {\n  const [scale, setScale] = useState<number>(1);\n  const parentRef = useRef<HTMLDivElement>(null);\n  const innerRef = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => {\n    const availableWidth = parentRef?.current?.offsetWidth;\n    const actualWidth = innerRef?.current?.offsetWidth;\n    const actualScale = availableWidth && actualWidth ? availableWidth / actualWidth : 1;\n    if (actualScale < 1) {\n      setScale(actualScale);\n    } else if (scale < 1) {\n      setScale(1);\n    }\n  });\n\n  return (\n    <div className=\"calculator-display\" ref={parentRef}>\n      <div className=\"calculator-display__auto-scaling\" style={{ transform: `scale(${scale},${scale})` }} ref={innerRef}>\n        {getFormattedValue(value)}\n      </div>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport './CalculatorKey.scss';\n\ninterface ICalculatorKeyProps {\n  keyValue: string | number;\n  onClick: () => void;\n  className?: string;\n}\n\nexport const CalculatorKey: FC<ICalculatorKeyProps> = ({ onClick, className, keyValue }) => (\n  <button className={`calculator-key ${className}`} type=\"button\" onClick={onClick}>\n    {keyValue}\n  </button>\n);\n","import { calculatorOperations } from '../utils/helpers';\nimport { ICalculaterState, EInputTypes, OperactionKeys } from '../types';\n\nexport interface IInputDigit {\n  type: EInputTypes.inputDigit;\n  payload: string | null;\n}\n\nexport interface IInputDot {\n  type: EInputTypes.inputDot;\n}\n\nexport interface IInputPercent {\n  type: EInputTypes.inputPercent;\n}\n\nexport interface IToggleSign {\n  type: EInputTypes.toggleSign;\n}\n\nexport interface IClearLastChar {\n  type: EInputTypes.clearLastChar;\n}\n\nexport interface IClearDisplay {\n  type: EInputTypes.clearDisplay;\n}\n\nexport interface IPerformOperation {\n  type: EInputTypes.performOperation;\n  payload: number | string | null;\n}\n\nexport interface IClearAll {\n  type: EInputTypes.clearAll;\n}\nexport const initialState: ICalculaterState = {\n  value: null,\n  displayValue: '0',\n  operator: null,\n  waitingForOperand: false,\n};\n\nexport const calculatorReducer = (\n  state: ICalculaterState,\n  action: IInputDigit | IInputDot | IInputPercent | IToggleSign | IClearLastChar | IClearDisplay | IPerformOperation | IClearAll,\n) => {\n  switch (action.type) {\n    case EInputTypes.inputDigit: {\n      if (state.waitingForOperand) {\n        return {\n          ...state,\n          displayValue: `${action.payload}`,\n          waitingForOperand: false,\n        };\n      }\n\n      return {\n        ...state,\n        displayValue: state.displayValue === '0' ? `${action.payload}` : `${state.displayValue}${action.payload}`,\n      };\n    }\n    case EInputTypes.inputDot: {\n      if (state.waitingForOperand) {\n        return {\n          ...state,\n          displayValue: '0.',\n          waitingForOperand: false,\n        };\n      }\n\n      return {\n        ...state,\n        displayValue: `${state.displayValue}.`,\n        waitingForOperand: false,\n      };\n    }\n\n    case EInputTypes.inputPercent: {\n      if (state.displayValue !== '0') {\n        const fixedDigits: string = state.displayValue.replace(/^-?\\d*\\.?/, '');\n        const newValue: number = parseFloat(state.displayValue) / 100;\n\n        return {\n          ...state,\n          displayValue: `${newValue.toFixed(fixedDigits.length + 2)}`,\n        };\n      }\n\n      return state;\n    }\n\n    case EInputTypes.toggleSign: {\n      const newValue = parseFloat(state.displayValue) * -1;\n\n      return {\n        ...state,\n        displayValue: `${newValue}`,\n      };\n    }\n\n    case EInputTypes.clearLastChar:\n      return {\n        ...state,\n        displayValue: state.displayValue.substring(0, state.displayValue.length - 1) || '0',\n      };\n\n    case EInputTypes.clearDisplay:\n      return {\n        ...state,\n        displayValue: '0',\n      };\n\n    case EInputTypes.performOperation: {\n      const inputValue = parseFloat(state.displayValue);\n\n      if (state.value === null) {\n        return {\n          ...state,\n          value: inputValue,\n          operator: action.payload,\n          waitingForOperand: true,\n        };\n      }\n\n      if (state.operator) {\n        const currentValue = state.value || 0;\n        const newValue = calculatorOperations[state.operator as OperactionKeys].func(currentValue, inputValue);\n\n        return {\n          value: newValue,\n          displayValue: String(newValue),\n          operator: action.payload,\n          waitingForOperand: true,\n        };\n      }\n\n      return {\n        ...state,\n        operator: action.payload,\n        waitingForOperand: false,\n      };\n    }\n\n    case EInputTypes.clearAll:\n      return initialState;\n\n    default:\n      return initialState;\n  }\n};\n","import React from 'react';\nimport _ from 'lodash';\nimport { CalculatorDisplay } from '../CalculatorDisplay';\nimport { CalculatorKey } from '../CalculatorKey';\nimport { calculatorOperations, digitKeys } from '../../utils/helpers';\nimport { useCalculator } from '../../hooks/useCalculator';\nimport { EInputTypes } from '../../types';\nimport './Calculator.scss';\n\nexport const Calculator = () => {\n  const { state, handleClick } = useCalculator();\n\n  return (\n    <div className=\"calculator\">\n      <CalculatorDisplay value={state.displayValue} />\n      <div className=\"calculator-keypad\">\n        <div className=\"input-keys\">\n          <div className=\"function-keys\">\n            <CalculatorKey\n              className=\"key-clear\"\n              onClick={() => handleClick(state.displayValue !== '0' ? EInputTypes.clearDisplay : EInputTypes.clearAll)}\n              keyValue={state.displayValue !== '0' ? 'C' : 'AC'}\n            />\n            <CalculatorKey className=\"key-sign\" onClick={() => handleClick(EInputTypes.toggleSign)} keyValue=\"±\" />\n            <CalculatorKey className=\"key-percent\" onClick={() => handleClick(EInputTypes.inputPercent)} keyValue=\"%\" />\n          </div>\n          <div className=\"digit-keys\">\n            {digitKeys.map((digit) => (\n              <CalculatorKey\n                key={`key-${digit}`}\n                className={`key-${digit}`}\n                onClick={() => handleClick(EInputTypes.inputDigit, digit)}\n                keyValue={digit}\n              />\n            ))}\n            <CalculatorKey className=\"key-dot\" onClick={() => handleClick(EInputTypes.inputDot)} keyValue=\"●\" />\n          </div>\n        </div>\n        <div className=\"operator-keys\">\n          {_.map(calculatorOperations, (value, key) => (\n            <CalculatorKey\n              key={`key-${value.name}`}\n              className={`key-${value.name}`}\n              onClick={() => handleClick(EInputTypes.performOperation, key)}\n              keyValue={value.symbol}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useEffect, useReducer } from 'react';\nimport { calculatorOperations } from '../utils';\nimport { calculatorReducer, initialState } from '../reducer';\nimport { EInputTypes } from '../types';\n\nexport const useCalculator = () => {\n  const [state, dispatch] = useReducer(calculatorReducer, initialState);\n\n  const handleClick = (type: EInputTypes, payload?: string) => {\n    if (payload) {\n      dispatch({ type, payload });\n    } else {\n      dispatch({ type, payload: null });\n    }\n  };\n\n  const handleKeyDown = (e: KeyboardEvent) => {\n    if (/\\d/.test(e.key)) {\n      e.preventDefault();\n      dispatch({\n        type: EInputTypes.inputDigit,\n        payload: e.key,\n      });\n    } else if (e.key in calculatorOperations) {\n      e.preventDefault();\n      dispatch({\n        type: EInputTypes.performOperation,\n        payload: e.key,\n      });\n    } else if (e.key === ',') {\n      e.preventDefault();\n      dispatch({\n        type: EInputTypes.inputDot,\n      });\n    } else if (e.key === '.') {\n      e.preventDefault();\n      dispatch({\n        type: EInputTypes.inputDot,\n      });\n    } else if (e.key === '%') {\n      e.preventDefault();\n      dispatch({\n        type: EInputTypes.inputPercent,\n      });\n    } else if (e.key === 'Backspace') {\n      e.preventDefault();\n      dispatch({\n        type: EInputTypes.clearLastChar,\n      });\n    } else if (e.key === 'Clear') {\n      e.preventDefault();\n\n      if (state.displayValue !== '0') {\n        dispatch({\n          type: EInputTypes.clearDisplay,\n        });\n      } else {\n        dispatch({\n          type: EInputTypes.clearAll,\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  });\n\n  return { state, handleClick };\n};\n","import React from 'react';\nimport { Calculator } from './components/Calculator';\nimport './App.scss';\n\nexport const App = () => (\n  <div className=\"app\">\n    <Calculator />\n  </div>\n);\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/.exec(window.location.hostname),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker === null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log('New content is available and will be used when all tabs for this page are closed. See https://cra.link/PWA.');\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType !== null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service worker. To learn more, visit https://cra.link/PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}