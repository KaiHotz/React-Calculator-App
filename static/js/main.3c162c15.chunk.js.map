{"version":3,"sources":["components/AutoScalingText/index.js","utils/helper.js","components/CalculatorDisplay/index.js","components/CalculatorKey/index.js","components/Calculator/index.js","App.js","serviceWorker.js","index.js"],"names":["AutoScalingText","_ref","children","_useState","useState","_useState2","Object","slicedToArray","scale","setScale","node","useRef","useEffect","actualScale","current","parentNode","offsetWidth","react_default","a","createElement","className","style","transform","concat","ref","defaultProps","DigitKeys","CalculatorOperations","/","name","symbol","func","prevValue","nextValue","*","-","+","=","calculatorDisplay","value","components_AutoScalingText","language","navigator","formattedValue","parseFloat","toLocaleString","useGrouping","maximumFractionDigits","match","test","length","String","toExponential","getFormattedValue","calculatorKey","onClick","react_point","onPoint","type","Calculator","setValue","_useState3","_useState4","displayValue","setDisplayValue","_useState5","_useState6","operator","setOperator","_useState7","_useState8","waitingForOperand","setWaitingForOperand","inputDigit","digit","inputDot","inputPercent","fixedDigits","replace","newValue","toFixed","clearDisplay","clearAll","performOperation","nextOperator","inputValue","currentValue","handleKeyDown","key","event","preventDefault","parseInt","substring","document","addEventListener","removeEventListener","CalculatorDisplay","CalculatorKey","map","_","App","components_Calculator","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"iTAMMA,SAAkB,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SAAeC,EACdC,mBAAS,GADKC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACjCK,EADiCH,EAAA,GAC1BI,EAD0BJ,EAAA,GAElCK,EAAOC,mBAgBb,OAdAC,oBAAU,WAAM,IAIRC,GAJQ,OACSH,QADT,IACSA,OADT,EACSA,EAAMI,SAArBC,WAC0BC,aACjB,OAAGN,QAAH,IAAGA,OAAH,EAAGA,EAAMI,QAAQE,aAE9BR,IAAUK,IAEVA,EAAc,EAChBJ,EAASI,GACAL,EAAQ,GACjBC,EAAS,MAKXQ,EAAAC,EAAAC,cAAA,OACEC,UAAU,oBACVC,MAAO,CAAEC,UAAS,SAAAC,OAAWf,EAAX,KAAAe,OAAoBf,EAApB,MAClBgB,IAAKd,GAEJR,KASPF,EAAgByB,aAAe,CAC7BvB,SAAU,KAGGF,QC3CF0B,EAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAExCC,EAAuB,CAClCC,IAAK,CACHC,KAAM,SACNC,OAAQ,OACRC,KAAM,SAACC,EAAWC,GAAZ,OAA0BD,EAAYC,IAE9CC,IAAK,CACHL,KAAM,WACNC,OAAQ,OACRC,KAAM,SAACC,EAAWC,GAAZ,OAA0BD,EAAYC,IAE9CE,IAAK,CACHN,KAAM,WACNC,OAAQ,SACRC,KAAM,SAACC,EAAWC,GAAZ,OAA0BD,EAAYC,IAE9CG,IAAK,CACHP,KAAM,MACNC,OAAQ,IACRC,KAAM,SAACC,EAAWC,GAAZ,OAA0BD,EAAYC,IAE9CI,IAAK,CACHR,KAAM,SACNC,OAAQ,IACRC,KAAM,SAACC,EAAWC,GAAZ,OAA0BA,KCpB9BK,SAAoB,SAAArC,GAAA,IAAGsC,EAAHtC,EAAGsC,MAAH,OACxBtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAACqB,EAAD,KDsB6B,SAAAD,GAC/B,IAAME,EAAWC,UAAUD,UAAY,QAEnCE,EAAiBC,WAAWL,GAAOM,eAAeJ,EAAU,CAC9DK,aAAa,EACbC,sBAAuB,IAGnBC,EAAQT,EAAMS,MAAM,eAI1B,OAFIA,IAASL,GAAmB,QAASM,KAAKD,EAAM,IAAMA,EAAM,GAAKA,EAAM,IAEpEL,EAAeO,QAAU,GAAKC,OAAOP,WAAWL,GAAOa,iBAAmBT,EClC7DU,CAAkBd,OAQxCD,EAAkBb,aAAe,CAC/Bc,MAAO,KAGMD,eCfTgB,SAAgB,SAAArD,GAAA,IAAGsD,EAAHtD,EAAGsD,QAASnC,EAAZnB,EAAYmB,UAAWlB,EAAvBD,EAAuBC,SAAvB,OACpBe,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAaC,QAASF,GACpBtC,EAAAC,EAAAC,cAAA,UAAQC,UAAS,kBAAAG,OAAoBH,GAAasC,KAAK,UACpDxD,MAcPoD,EAAc7B,aAAe,CAC3BL,UAAW,MAGEkC,QC4JAK,SA/KI,WAAM,IAAAxD,EACGC,mBAAS,MADZC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAChBoC,EADgBlC,EAAA,GACTuD,EADSvD,EAAA,GAAAwD,EAEiBzD,mBAAS,KAF1B0D,EAAAxD,OAAAC,EAAA,EAAAD,CAAAuD,EAAA,GAEhBE,EAFgBD,EAAA,GAEFE,EAFEF,EAAA,GAAAG,EAGS7D,mBAAS,MAHlB8D,EAAA5D,OAAAC,EAAA,EAAAD,CAAA2D,EAAA,GAGhBE,EAHgBD,EAAA,GAGNE,EAHMF,EAAA,GAAAG,EAI2BjE,oBAAS,GAJpCkE,EAAAhE,OAAAC,EAAA,EAAAD,CAAA+D,EAAA,GAIhBE,EAJgBD,EAAA,GAIGE,EAJHF,EAAA,GAMjBG,EAAa,SAAAC,GAAK,OAAI,WACtBH,GACFP,EAAgBb,OAAOuB,IACvBF,GAAqB,IAErBR,EAAiC,MAAjBD,EAAuBZ,OAAOuB,GAASX,EAAeW,KAIpEC,EAAW,WACXJ,GACFP,EAAgB,MAChBQ,GAAqB,IACV,KAAMvB,KAAKc,KACtBC,EAAe,GAAAzC,OAAIwC,EAAJ,MACfS,GAAqB,KAInBI,EAAe,WAGnB,GAAqB,IAFAhC,WAAWmB,GAEhC,CAEA,IAAMc,EAAcd,EAAae,QAAQ,YAAa,IAChDC,EAAWnC,WAAWmB,GAAgB,IAC5CC,EAAgBb,OAAO4B,EAASC,QAAQH,EAAY3B,OAAS,OAYzD+B,EAAe,WACnBjB,EAAgB,MAGZkB,EAAW,WACftB,EAAS,MACTI,EAAgB,KAChBI,EAAY,MACZI,GAAqB,IAGjBW,EAAmB,SAAAC,GAAY,OAAI,WACvC,IAAMC,EAAazC,WAAWmB,GAE9B,GAAa,MAATxB,EACFqB,EAASyB,QACJ,GAAIlB,EAAU,CACnB,IAAMmB,EAAe/C,GAAS,EACxBwC,EAAWpD,EAAqBwC,GAAUpC,KAAKuD,EAAcD,GAEnEzB,EAASmB,GACTf,EAAgBb,OAAO4B,IAGzBX,EAAYgB,GACZZ,GAAqB,KAGjBe,EAAgB,SAAAtF,GAAa,IAAVuF,EAAUvF,EAAVuF,IACX,UAARA,IAAmBA,EAAM,KAExB,KAAMvC,KAAKuC,IACdC,MAAMC,iBACNjB,EAAWkB,SAASH,EAAK,IAAzBf,IACSe,KAAO7D,GAChB8D,MAAMC,iBACNP,EAAiBK,EAAjBL,IACiB,MAARK,GACTC,MAAMC,iBACNf,KACiB,MAARa,GACTC,MAAMC,iBACNf,KACiB,MAARa,GACTC,MAAMC,iBACNd,KACiB,cAARY,GACTC,MAAMC,iBAlDR1B,EAAgBD,EAAa6B,UAAU,EAAG7B,EAAab,OAAS,IAAM,MAoDnD,UAARsC,IACTC,MAAMC,iBAEe,MAAjB3B,EACFkB,IAEAC,MAaN,OARAtE,oBAAU,WAGR,OAFAiF,SAASC,iBAAiB,UAAWP,GAE9B,WACLM,SAASE,oBAAoB,UAAWR,MAK1CtE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAC6E,EAAD,CAAmBzD,MAAOwB,IAC1B9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAC8E,EAAD,CACE7E,UAAU,YACVmC,QAA0B,MAAjBQ,EAAuBkB,EAAeC,GAE7B,MAAjBnB,EAAuB,IAAM,MAEhC9C,EAAAC,EAAAC,cAAC8E,EAAD,CACE7E,UAAU,WACVmC,QA3FO,WACjB,IAAMwB,GAAuC,EAA5BnC,WAAWmB,GAC5BC,EAAgBb,OAAO4B,MAuFf,QAMA9D,EAAAC,EAAAC,cAAC8E,EAAD,CACE7E,UAAU,cACVmC,QAASqB,GAFX,MAOF3D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAEXM,EAAUwE,IAAI,SAAAxB,GAAK,OACjBzD,EAAAC,EAAAC,cAAC8E,EAAD,CACET,IAAG,OAAAjE,OAASmD,GACZtD,UAAS,OAAAG,OAASmD,GAClBnB,QAASkB,EAAWC,IAEnBA,KAIPzD,EAAAC,EAAAC,cAAC8E,EAAD,CACE7E,UAAU,UACVmC,QAASoB,GAFX,YAQJ1D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAEX+E,IAAED,IAAIvE,EAAsB,SAACY,EAAOiD,GAAR,OAC1BvE,EAAAC,EAAAC,cAAC8E,EAAD,CACET,IAAG,OAAAjE,OAASgB,EAAMV,MAClBT,UAAS,OAAAG,OAASgB,EAAMV,MACxB0B,QAAS4B,EAAiBK,IAEzBjD,EAAMT,eClKRsE,SANH,kBACVnF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACkF,EAAD,SCMEC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS1D,MACvB,2DAsCN,SAAS2D,EAAgBC,EAAOC,GAC9BnE,UAAUoE,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACf5E,UAAUoE,cAAcS,YAI1BC,QAAQC,IACN,gHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAAST,KAMlBO,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUV,UAO5BW,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,WC1FjEC,IAASC,OAAO9G,EAAAC,EAAAC,cAAC6G,EAAD,MAASnC,SAASoC,eAAe,SDgB1C,SAAkBpB,GACvB,GAA6C,kBAAmBnE,UAAW,CAGzE,GADkB,IAAIwF,IAAIC,wBAAwB3B,OAAOC,SAAS2B,MACpDC,SAAW7B,OAAOC,SAAS4B,OAIvC,OAGF7B,OAAOV,iBAAiB,OAAQ,WAC9B,IAAMc,EAAK,GAAArF,OAAM4G,wBAAN,sBAEP7B,GAgEV,SAAiCM,EAAOC,GAEtCyB,MAAM1B,GACHI,KAAK,SAAAuB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5ClG,UAAUoE,cAAc+B,MAAM7B,KAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,KAAK,WAC7BR,OAAOC,SAASsC,aAKpBpC,EAAgBC,EAAOC,KAG1Be,MAAM,WACLJ,QAAQC,IACN,mEArFAuB,CAAwBpC,EAAOC,GAI/BnE,UAAUoE,cAAc+B,MAAM7B,KAAK,WACjCQ,QAAQC,IACN,+GAMJd,EAAgBC,EAAOC,MCvC/BC","file":"static/js/main.3c162c15.chunk.js","sourcesContent":["import React, {\n  useState, useRef, useEffect,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport './styles.css'\n\nconst AutoScalingText = ({ children }) => {\n  const [scale, setScale] = useState(1)\n  const node = useRef()\n\n  useEffect(() => {\n    const { parentNode } = node?.current\n    const availableWidth = parentNode.offsetWidth\n    const actualWidth = node?.current.offsetWidth\n    const actualScale = availableWidth / actualWidth\n    if (scale === actualScale) { return }\n\n    if (actualScale < 1) {\n      setScale(actualScale)\n    } else if (scale < 1) {\n      setScale(1)\n    }\n  })\n\n  return (\n    <div\n      className=\"auto-scaling-text\"\n      style={{ transform: `scale(${scale},${scale})` }}\n      ref={node}\n    >\n      {children}\n    </div>\n  )\n}\n\nAutoScalingText.propTypes = {\n  children: PropTypes.string,\n}\n\nAutoScalingText.defaultProps = {\n  children: '0',\n}\n\nexport default AutoScalingText\n","export const DigitKeys = [7, 8, 9, 4, 5, 6, 1, 2, 3, 0]\n\nexport const CalculatorOperations = {\n  '/': {\n    name: 'divide',\n    symbol: '÷',\n    func: (prevValue, nextValue) => prevValue / nextValue,\n  },\n  '*': {\n    name: 'multiply',\n    symbol: '×',\n    func: (prevValue, nextValue) => prevValue * nextValue,\n  },\n  '-': {\n    name: 'subtract',\n    symbol: '−',\n    func: (prevValue, nextValue) => prevValue - nextValue,\n  },\n  '+': {\n    name: 'add',\n    symbol: '+',\n    func: (prevValue, nextValue) => prevValue + nextValue,\n  },\n  '=': {\n    name: 'equals',\n    symbol: '=',\n    func: (prevValue, nextValue) => nextValue,\n  },\n}\n\nexport const getFormattedValue = value => {\n  const language = navigator.language || 'en-US'\n\n  let formattedValue = parseFloat(value).toLocaleString(language, {\n    useGrouping: true,\n    maximumFractionDigits: 6,\n  })\n\n  const match = value.match(/\\.\\d*?(0*)$/)\n\n  if (match) { formattedValue += (/[1-9]/).test(match[0]) ? match[1] : match[0] }\n\n  return formattedValue.length >= 14 ? String(parseFloat(value).toExponential()) : formattedValue\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport AutoScalingText from '../AutoScalingText'\nimport { getFormattedValue } from '../../utils/helper'\nimport './styles.css'\n\nconst calculatorDisplay = ({ value }) => (\n  <div className=\"calculator-display\">\n    <AutoScalingText>{getFormattedValue(value)}</AutoScalingText>\n  </div>\n)\n\ncalculatorDisplay.propTypes = {\n  value: PropTypes.string,\n}\n\ncalculatorDisplay.defaultProps = {\n  value: '0',\n}\n\nexport default calculatorDisplay\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport PointTarget from 'react-point'\nimport './styles.scss'\n\nconst calculatorKey = ({ onClick, className, children }) => (\n  <PointTarget onPoint={onClick}>\n    <button className={`calculator-key ${className}`} type=\"button\">\n      {children}\n    </button>\n  </PointTarget>\n)\n\ncalculatorKey.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  children: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]).isRequired,\n}\n\ncalculatorKey.defaultProps = {\n  className: null,\n}\n\nexport default calculatorKey\n","import React, { useState, useEffect } from 'react'\nimport _ from 'lodash'\nimport CalculatorDisplay from '../CalculatorDisplay'\nimport CalculatorKey from '../CalculatorKey'\nimport { CalculatorOperations, DigitKeys } from '../../utils/helper'\nimport './styles.scss'\n\nconst Calculator = () => {\n  const [value, setValue] = useState(null)\n  const [displayValue, setDisplayValue] = useState('0')\n  const [operator, setOperator] = useState(null)\n  const [waitingForOperand, setWaitingForOperand] = useState(false)\n\n  const inputDigit = digit => () => {\n    if (waitingForOperand) {\n      setDisplayValue(String(digit))\n      setWaitingForOperand(false)\n    } else {\n      setDisplayValue(displayValue === '0' ? String(digit) : displayValue + digit)\n    }\n  }\n\n  const inputDot = () => {\n    if (waitingForOperand) {\n      setDisplayValue('0.')\n      setWaitingForOperand(false)\n    } else if (!(/\\./).test(displayValue)) {\n      setDisplayValue(`${displayValue}.`)\n      setWaitingForOperand(false)\n    }\n  }\n\n  const inputPercent = () => {\n    const currentValue = parseFloat(displayValue)\n\n    if (currentValue === 0) { return }\n\n    const fixedDigits = displayValue.replace(/^-?\\d*\\.?/, '')\n    const newValue = parseFloat(displayValue) / 100\n    setDisplayValue(String(newValue.toFixed(fixedDigits.length + 2)))\n  }\n\n  const toggleSign = () => {\n    const newValue = parseFloat(displayValue) * -1\n    setDisplayValue(String(newValue))\n  }\n\n  const clearLastChar = () => {\n    setDisplayValue(displayValue.substring(0, displayValue.length - 1) || '0')\n  }\n\n  const clearDisplay = () => {\n    setDisplayValue('0')\n  }\n\n  const clearAll = () => {\n    setValue(null)\n    setDisplayValue('0')\n    setOperator(null)\n    setWaitingForOperand(false)\n  }\n\n  const performOperation = nextOperator => () => {\n    const inputValue = parseFloat(displayValue)\n\n    if (value == null) {\n      setValue(inputValue)\n    } else if (operator) {\n      const currentValue = value || 0\n      const newValue = CalculatorOperations[operator].func(currentValue, inputValue)\n\n      setValue(newValue)\n      setDisplayValue(String(newValue))\n    }\n\n    setOperator(nextOperator)\n    setWaitingForOperand(true)\n  }\n\n  const handleKeyDown = ({ key }) => {\n    if (key === 'Enter') { key = '=' }\n\n    if ((/\\d/).test(key)) {\n      event.preventDefault()\n      inputDigit(parseInt(key, 10))()\n    } else if (key in CalculatorOperations) {\n      event.preventDefault()\n      performOperation(key)()\n    } else if (key === ',') {\n      event.preventDefault()\n      inputDot()\n    } else if (key === '.') {\n      event.preventDefault()\n      inputDot()\n    } else if (key === '%') {\n      event.preventDefault()\n      inputPercent()\n    } else if (key === 'Backspace') {\n      event.preventDefault()\n      clearLastChar()\n    } else if (key === 'Clear') {\n      event.preventDefault()\n\n      if (displayValue !== '0') {\n        clearDisplay()\n      } else {\n        clearAll()\n      }\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyDown)\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown)\n    }\n  })\n\n  return (\n    <div className=\"calculator\">\n      <CalculatorDisplay value={displayValue} />\n      <div className=\"calculator-keypad\">\n        <div className=\"input-keys\">\n          <div className=\"function-keys\">\n            <CalculatorKey\n              className=\"key-clear\"\n              onClick={displayValue !== '0' ? clearDisplay : clearAll}\n            >\n              {displayValue !== '0' ? 'C' : 'AC'}\n            </CalculatorKey>\n            <CalculatorKey\n              className=\"key-sign\"\n              onClick={toggleSign}\n            >\n              ±\n            </CalculatorKey>\n            <CalculatorKey\n              className=\"key-percent\"\n              onClick={inputPercent}\n            >\n              %\n            </CalculatorKey>\n          </div>\n          <div className=\"digit-keys\">\n            {\n              DigitKeys.map(digit => (\n                <CalculatorKey\n                  key={`key-${digit}`}\n                  className={`key-${digit}`}\n                  onClick={inputDigit(digit)}\n                >\n                  {digit}\n                </CalculatorKey>\n              ))\n            }\n            <CalculatorKey\n              className=\"key-dot\"\n              onClick={inputDot}\n            >\n              ●\n            </CalculatorKey>\n          </div>\n        </div>\n        <div className=\"operator-keys\">\n          {\n            _.map(CalculatorOperations, (value, key) => (\n              <CalculatorKey\n                key={`key-${value.name}`}\n                className={`key-${value.name}`}\n                onClick={performOperation(key)}\n              >\n                {value.symbol}\n              </CalculatorKey>\n            ))\n          }\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Calculator\n","import React from 'react'\nimport Calculator from './components/Calculator'\nimport './App.css'\n\nconst App = () => (\n  <div className=\"app\">\n    <Calculator />\n  </div>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport './global-styles.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}