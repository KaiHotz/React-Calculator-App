{"version":3,"sources":["hooks/index.js","components/AutoScalingText/index.js","utils/helper.js","components/CalculatorDisplay/index.js","components/CalculatorKey/index.js","reducer/index.js","components/Calculator/index.js","App.js","serviceWorker.js","index.js"],"names":["useScale","ref","_useState","useState","_useState2","Object","slicedToArray","scale","setScale","useEffect","actualScale","current","parentNode","offsetWidth","AutoScalingText","_ref","children","node","useRef","react_default","a","createElement","className","style","transform","concat","defaultProps","DigitKeys","CalculatorOperations","/","name","symbol","func","prevValue","nextValue","*","-","+","=","CalculatorDisplay","value","components_AutoScalingText","language","navigator","formattedValue","parseFloat","toLocaleString","useGrouping","maximumFractionDigits","match","test","length","String","toExponential","getFormattedValue","CalculatorKey","onClick","react_point","onPoint","type","initialState","displayValue","operator","waitingForOperand","reducer","state","action","objectSpread","fixedDigits","replace","newValue","toFixed","substring","inputValue","currentValue","Calculator","_useReducer","useReducer","_useReducer2","dispatch","handleKeyDown","key","event","preventDefault","parseInt","handleClick","arguments","undefined","document","addEventListener","removeEventListener","components_CalculatorDisplay","components_CalculatorKey","map","digit","_","App","components_Calculator","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.85efe07f.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\n\nexport const useScale = ref => {\n  const [scale, setScale] = useState(1)\n\n  useEffect(() => {\n    const { parentNode } = ref ?.current\n    const availableWidth = parentNode.offsetWidth\n    const actualWidth = ref ?.current.offsetWidth\n    const actualScale = availableWidth / actualWidth\n    if (scale === actualScale) { return }\n\n    if (actualScale < 1) {\n      setScale(actualScale)\n    } else if (scale < 1) {\n      setScale(1)\n    }\n  })\n\n  return scale\n}\n\nexport default useScale\n\n","import React, { useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { useScale } from '../../hooks'\nimport './styles.css'\n\nconst AutoScalingText = ({ children }) => {\n  const node = useRef()\n  const scale = useScale(node)\n\n  return (\n    <div\n      className=\"auto-scaling-text\"\n      style={{ transform: `scale(${scale},${scale})` }}\n      ref={node}\n    >\n      {children}\n    </div>\n  )\n}\n\nAutoScalingText.propTypes = {\n  children: PropTypes.string,\n}\n\nAutoScalingText.defaultProps = {\n  children: '0',\n}\n\nexport default AutoScalingText\n","export const DigitKeys = [7, 8, 9, 4, 5, 6, 1, 2, 3, 0]\n\nexport const CalculatorOperations = {\n  '/': {\n    name: 'divide',\n    symbol: '÷',\n    func: (prevValue, nextValue) => prevValue / nextValue,\n  },\n  '*': {\n    name: 'multiply',\n    symbol: '×',\n    func: (prevValue, nextValue) => prevValue * nextValue,\n  },\n  '-': {\n    name: 'subtract',\n    symbol: '−',\n    func: (prevValue, nextValue) => prevValue - nextValue,\n  },\n  '+': {\n    name: 'add',\n    symbol: '+',\n    func: (prevValue, nextValue) => prevValue + nextValue,\n  },\n  '=': {\n    name: 'equals',\n    symbol: '=',\n    func: (prevValue, nextValue) => nextValue,\n  },\n}\n\nexport const getFormattedValue = value => {\n  const language = navigator.language || 'en-US'\n\n  let formattedValue = parseFloat(value).toLocaleString(language, {\n    useGrouping: true,\n    maximumFractionDigits: 6,\n  })\n\n  const match = value.match(/\\.\\d*?(0*)$/)\n\n  if (match) { formattedValue += (/[1-9]/).test(match[0]) ? match[1] : match[0] }\n\n  return formattedValue.length >= 14 ? String(parseFloat(value).toExponential()) : formattedValue\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport AutoScalingText from '../AutoScalingText'\nimport { getFormattedValue } from '../../utils/helper'\nimport './styles.css'\n\nconst CalculatorDisplay = ({ value }) => (\n  <div className=\"calculator-display\">\n    <AutoScalingText>{getFormattedValue(value)}</AutoScalingText>\n  </div>\n)\n\nCalculatorDisplay.propTypes = {\n  value: PropTypes.string,\n}\n\nCalculatorDisplay.defaultProps = {\n  value: '0',\n}\n\nexport default CalculatorDisplay\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport PointTarget from 'react-point'\nimport './styles.scss'\n\nconst CalculatorKey = ({ onClick, className, children }) => (\n  <PointTarget onPoint={onClick}>\n    <button className={`calculator-key ${className}`} type=\"button\">\n      {children}\n    </button>\n  </PointTarget>\n)\n\nCalculatorKey.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  children: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n}\n\nCalculatorKey.defaultProps = {\n  className: null,\n  children: null,\n}\n\nexport default CalculatorKey\n","import { CalculatorOperations } from '../utils/helper'\n\nexport const initialState = {\n  value: null,\n  displayValue: '0',\n  operator: null,\n  waitingForOperand: false,\n}\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case 'inputDigit': {\n      if (state.waitingForOperand) {\n        return {\n          ...state,\n          displayValue: String(action.value),\n          waitingForOperand: false,\n        }\n      }\n\n      return {\n        ...state,\n        displayValue: state.displayValue === '0' ? String(action.value) : state.displayValue + action.value,\n      }\n    }\n    case 'inputDot': {\n      if (state.waitingForOperand) {\n        return {\n          ...state,\n          displayValue: '0.',\n          waitingForOperand: false,\n        }\n      }\n\n      return {\n        ...state,\n        displayValue: `${state.displayValue}.`,\n        waitingForOperand: false,\n      }\n    }\n\n    case 'inputPercent': {\n      const currentValue = parseFloat(state.displayValue)\n      if (currentValue !== 0) {\n        const fixedDigits = state.displayValue.replace(/^-?\\d*\\.?/, '')\n        const newValue = parseFloat(state.displayValue) / 100\n\n        return {\n          ...state,\n          displayValue: String(newValue.toFixed(fixedDigits.length + 2)),\n        }\n      }\n    }\n      break\n    case 'toggleSign': {\n      const newValue = parseFloat(state.displayValue) * -1\n\n      return {\n        ...state,\n        displayValue: String(newValue),\n      }\n    }\n\n    case 'clearLastChar':\n      return {\n        ...state,\n        displayValue: state.displayValue.substring(0, state.displayValue.length - 1) || '0',\n      }\n\n    case 'clearDisplay':\n      return {\n        ...state,\n        displayValue: '0',\n      }\n\n    case 'performOperation': {\n      const inputValue = parseFloat(state.displayValue)\n\n      if (state.value == null) {\n        return {\n          ...state,\n          value: inputValue,\n          operator: action.value,\n          waitingForOperand: true,\n        }\n      }\n\n      if (state.operator) {\n        const currentValue = state.value || 0\n        const newValue = CalculatorOperations[state.operator].func(currentValue, inputValue)\n\n        return {\n          value: newValue,\n          displayValue: String(newValue),\n          operator: action.value,\n          waitingForOperand: true,\n        }\n      }\n\n      return {\n        ...state,\n        operator: action.value,\n        waitingForOperand: false,\n      }\n    }\n\n    case 'clearAll':\n      return initialState\n\n    default:\n      return initialState\n  }\n}\n","import React, { useEffect, useReducer } from 'react'\nimport _ from 'lodash'\nimport CalculatorDisplay from '../CalculatorDisplay'\nimport CalculatorKey from '../CalculatorKey'\nimport { CalculatorOperations, DigitKeys } from '../../utils/helper'\nimport { reducer, initialState } from '../../reducer'\nimport './styles.scss'\n\nconst Calculator = () => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const handleKeyDown = ({ key }) => {\n    if (key === 'Enter') { key = '=' }\n\n    if ((/\\d/).test(key)) {\n      event.preventDefault()\n      dispatch({ type: 'inputDigit', value: parseInt(key, 10) })\n    } else if (key in CalculatorOperations) {\n      event.preventDefault()\n      dispatch({ type: 'performOperation', value: key })\n    } else if (key === ',') {\n      event.preventDefault()\n      dispatch({ type: 'inputDot' })\n    } else if (key === '.') {\n      event.preventDefault()\n      dispatch({ type: 'inputDot' })\n    } else if (key === '%') {\n      event.preventDefault()\n      dispatch({ type: 'inputPercent' })\n    } else if (key === 'Backspace') {\n      event.preventDefault()\n      dispatch({ type: 'clearLastChar' })\n    } else if (key === 'Clear') {\n      event.preventDefault()\n\n      if (state.displayValue !== '0') {\n        dispatch({ type: 'clearDisplay' })\n      } else {\n        dispatch({ type: 'clearAll' })\n      }\n    }\n  }\n\n  const handleClick = (type, value = null) => () => {\n    dispatch({ type, value })\n  }\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyDown)\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown)\n    }\n  })\n\n  return (\n    <div className=\"calculator\">\n      <CalculatorDisplay value={state.displayValue} />\n      <div className=\"calculator-keypad\">\n        <div className=\"input-keys\">\n          <div className=\"function-keys\">\n            <CalculatorKey\n              className=\"key-clear\"\n              onClick={handleClick(state.displayValue !== '0' ? 'clearDisplay' : 'clearAll')}\n            >\n              {state.displayValue !== '0' ? 'C' : 'AC'}\n            </CalculatorKey>\n            <CalculatorKey\n              className=\"key-sign\"\n              onClick={handleClick('toggleSign')}\n            >\n              ±\n            </CalculatorKey>\n            <CalculatorKey\n              className=\"key-percent\"\n              onClick={handleClick('inputPercent')}\n            >\n              %\n            </CalculatorKey>\n          </div>\n          <div className=\"digit-keys\">\n            {\n              DigitKeys.map(digit => (\n                <CalculatorKey\n                  key={`key-${digit}`}\n                  className={`key-${digit}`}\n                  onClick={handleClick('inputDigit', digit)}\n                >\n                  {digit}\n                </CalculatorKey>\n              ))\n            }\n            <CalculatorKey\n              className=\"key-dot\"\n              onClick={handleClick('inputDot')}\n            >\n              ●\n            </CalculatorKey>\n          </div>\n        </div>\n        <div className=\"operator-keys\">\n          {\n            _.map(CalculatorOperations, (value, key) => (\n              <CalculatorKey\n                key={`key-${value.name}`}\n                className={`key-${value.name}`}\n                onClick={handleClick('performOperation', key)}\n              >\n                {value.symbol}\n              </CalculatorKey>\n            ))\n          }\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Calculator\n","import React from 'react'\nimport Calculator from './components/Calculator'\nimport './App.css'\n\nconst App = () => (\n  <div className=\"app\">\n    <Calculator />\n  </div>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport './global-styles.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}